{"version":3,"sources":["components/NavBar/Navbar.js","components/AddGoal.js","ui/FormWrapper.js","components/Goal.js","ui/allDone.gif","ui/Goals.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","onClick","toggleMode","AddGoal","useState","enteredGoal","setEnteredGoal","GoalData","id","Math","random","goal","complete","onSubmit","event","preventDefault","formData","value","required","onChange","target","placeholder","type","Wrapper","FormData","onRespondData","Goal","data","completedItem","src","alt","Index","index","deleteGoal","Goals","goalsDeleteIndex","i","deleteHandeler","item","isCompleted","undefined","goalItem","length","done","map","Initial_Goal","App","finalGoal","setFinalGoal","isDarkMode","setisDarkMode","useEffect","localStorage","setItem","JSON","stringify","RecievedData","getLocalItem","e","console","log","deleteIndex","splice","prevUpdatedGoal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b89b904.chunk.js","sourcesContent":["import React, {  } from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <div className={props.mode === 'light'?\"lightNavBar\":\"darkNavBar\"}>\r\n      <div className={props.mode === 'light' ?\"light-navbar-left\":\"dark-navbar-left\"}>\r\n        <p>Your Goals</p>\r\n      </div>\r\n      <div className=\"navbar-right\">\r\n        <div className=\"darkModeContainer\">\r\n          <button onClick={props.toggleMode} className={props.mode === 'light' ? \"light-Mode-btn\":\"dark-Mode-btn\"} >\r\n            {props.mode === 'light' ? \"Enable Dark Mode\" : \"Enable Light Mode\" }\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./AddGoal.css\";\r\n\r\nfunction AddGoal(props) {\r\n  const [enteredGoal, setEnteredGoal] = useState(\"\");\r\n\r\n  const goalChangeHandeler = (event) => {\r\n    setEnteredGoal(event.target.value);\r\n  };\r\n\r\n  const GoalData = {\r\n    id: Math.random(),\r\n    goal: enteredGoal,\r\n    complete: false,\r\n  };\r\n\r\n  const onSubmitHandeler = (event) => {\r\n    event.preventDefault();\r\n    props.formData(GoalData);\r\n    setEnteredGoal(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"AddGoal-Form\">\r\n      <h2\r\n        className={\r\n          props.mode === \"light\" ? \"light-form-heading\" : \"dark-form-heading\"\r\n        }\r\n      >\r\n        What's your plan for the Today?\r\n      </h2>\r\n      <form onSubmit={onSubmitHandeler}>\r\n        <input\r\n          value={enteredGoal}\r\n          required\r\n          onChange={goalChangeHandeler}\r\n          placeholder=\"Add your Goal here...\"\r\n          className={\r\n            props.mode === \"light\" ? \"light-form-input\" : \"dark-form-input\"\r\n          }\r\n        />\r\n\r\n        <button\r\n          type=\"submit\"\r\n          className={\r\n            props.mode === \"light\" ? \"light-form-btn\" : \"dark-form-btn\"\r\n          }\r\n        >\r\n          Add Goal\r\n        </button>\r\n      </form>\r\n      {/* <button>Enable Dark Mode</button> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddGoal;\r\n","import React from \"react\";\r\nimport AddGoal from \"../components/AddGoal\";\r\nimport \"./FormWrapper.css\";\r\n\r\nfunction Wrapper(props) {\r\n  const fetchedData = (FormData) => {\r\n    props.onRespondData(FormData);\r\n  };\r\n\r\n  return (\r\n    <div className={props.mode === \"light\" ? \"light-wrapper\" : \"dark-wrapper\"}>\r\n      <AddGoal formData={fetchedData} mode={props.mode} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./Goal.css\";\r\n\r\nfunction Goal(props) {\r\n  const onDeleteHandler = () => {\r\n    const Index = props.index;\r\n    props.deleteGoal(Index);\r\n  };\r\n\r\n  const isChecked = ()=>{\r\n    props.completedItem(props.data)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className={props.mode === \"light\" ? \"light-goal-wrapper\" : \"dark-goal-wrapper\"} key={props.data.id}>\r\n      <p className={props.data.complete === false ? \"goal-heading\":\"completed-goal-heading\"}>{props.data.goal}</p>\r\n      <div className=\"Action-buttons\">\r\n        <button className={props.mode === \"light\" ? \"light-Complete-btn\" : \"dark-Complete-btn\"} onClick={isChecked}><img src=\"https://img.icons8.com/fluency/28/000000/checkmark.png\" alt=\"Done Logo Here\" /></button>\r\n        <button className={props.mode === \"light\" ? \"light-goal-delete\" : \"dark-goal-delete\"} onClick={onDeleteHandler}>Delete</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Goal;\r\n","export default __webpack_public_path__ + \"static/media/allDone.863a9f72.gif\";","import React from \"react\";\r\nimport \"./Goals.css\";\r\nimport Goal from \"../components/Goal\";\r\nimport done from \"./allDone.gif\";\r\n\r\n\r\nfunction Goals(props) {\r\n  const goalsDeleteIndex = (i) => {\r\n    props.deleteHandeler(i);\r\n  };\r\n\r\n  const completedItem = (item)=>{\r\n    props.isCompleted(item)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {undefined !== props.goalItem && props.goalItem.length === 0 ? (\r\n       <img className=\"done-logo\" src={done} alt=\"logo here\"/>\r\n      ) : (\r\n        <div className=\"Goals-Wrapper\">\r\n          {props.goalItem.map((data, index) => {\r\n            return (\r\n              <Goal\r\n                key={index}\r\n                data={data}\r\n                completedItem={completedItem}\r\n                deleteGoal={goalsDeleteIndex}\r\n                mode={props.mode}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Goals;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/NavBar/Navbar\";\nimport FormWrapper from \"./ui/FormWrapper\";\nimport Goals from \"./ui/Goals\";\n\nconst Initial_Goal = [];\n\n//getting data from local storage\n// const getLocalItem = () => {\n//   let list = localStorage.getItem(\"goals\");\n//   if (list) {\n//     return JSON.parse(localStorage.getItem(\"goals\"));\n//   }\n// };\n\nfunction App() {\n  const [finalGoal, setFinalGoal] = useState(Initial_Goal);\n\n  const [isDarkMode, setisDarkMode] = useState('light');\n\n  //toggleMode  Function\n  const toggleMode = () => {\n    if(isDarkMode === 'light')\n    {\n      setisDarkMode('dark')\n\n    }\n    else{\n      setisDarkMode('light')\n    }\n  };\n\n  //create goal handeler\n  const recievedData = (RecievedData) => {\n    setFinalGoal((getLocalItem) => {\n      return setFinalGoal([RecievedData, ...getLocalItem]);\n    });\n  };\n\n  //add goals to local storage\n  useEffect(() => {\n    localStorage.setItem(\"goals\", JSON.stringify(finalGoal));\n  });\n\n  // delete goal handeler\n  const onDeleteHandeler = (deleteIndex) => {\n    finalGoal.splice(deleteIndex, 1);\n    // console.log(updatedGoal);\n    setFinalGoal((prevUpdatedGoal) => {\n      return setFinalGoal([...prevUpdatedGoal]);\n    });\n  };\n\n  const isCompleted = (item)=>{\n    setFinalGoal(\n      finalGoal.map((e)=>{\n        if(e.id === item.id )\n        {\n          return{\n            ...e,\n            complete : !e.complete,\n          };\n        }\n        return e;\n      })\n    )\n    console.log(finalGoal);\n    \n  }\n\n  \n  return (\n    <>\n      <Navbar mode={isDarkMode} toggleMode={toggleMode} />\n      <div className={isDarkMode==='light'?\"light-main\":\"dark-main\"}>\n        <FormWrapper onRespondData={recievedData} mode={isDarkMode} />\n        <Goals goalItem={finalGoal} isCompleted={isCompleted} deleteHandeler={onDeleteHandeler} mode={isDarkMode} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}